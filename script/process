#!/usr/bin/env ruby
#/ Usage: script/process --crops CROPLIST INPUT
#/ CROPLIST is first column from harvest spreadsheet.
#/ INPUT is a typed version of harvest sheet.
#/ Output is one of these:
#/   A. List of crops to add.
#/   B. The values to put into harvest sheet.

require 'optparse'

def parse_input_file(input_file)
  res = {}
  File.readlines(input_file).each do |line|
    crop, quantity = line.strip.split('|')
    crop = crop.strip
    quantity = quantity.to_f
    if quantity > 0
      res[crop] = res.fetch(crop, 0.0) + quantity
    end
  end
  res
end

def parse_crop_list(crop_list_file)
  crops = File.readlines(crop_list_file).map(&:strip)
  # the harvest sheet has two header rows.
  crops.shift; crops.shift
  crops
end

def format_crop(crop, quantity)
  return "" if quantity.nil?
  unit = crop.split(",").last.strip
  case unit
  when "lb"
    if (quantity - quantity.to_i) < 0.1
      "%d" % quantity.to_i
    else
      "%0.1f" % quantity
    end
  when "bouquets", "bulbs", "bunches", "clamshell", "count", "lettuce heads", "pint", "pt"
    "%d" % quantity.to_i
  else
    raise "Unknown unit in #{crop.inspect}"
  end
end

def main(input:, crop_list:)
  input_data = parse_input_file(input)
  crop_list_data = parse_crop_list(crop_list)

  # Check for unmatched crops
  unmatched_crops = input_data.keys - crop_list_data
  if unmatched_crops.any?
    # Output A: List of crops to add
    $stderr.puts "** These crops aren't in the harvest sheet.",
      "** Add rows for them, then copy the first column to #{crop_list},",
      "** then re-run this program.",
      "",
      unmatched_crops.map { |crop| "  #{crop}" }
  else
    # Output B: Values aligned with crop list
    crop_list_data.each do |crop|
      puts format_crop(crop, input_data[crop])
    end
  end
end

options = {crop_list: "crops.txt"}
OptionParser.new do |opts|
  opts.banner = "Usage: script/process --crops CROPLIST INPUT"
  opts.on("--crops CROPLIST", "File containing list of valid crops (default is crops.txt)") do |c|
    options[:crop_list] = c
  end
end.parse!

if ARGV.size != 1
  puts "Error: Expected exactly one input file"
  exit 1
end

if options[:crop_list].nil?
  puts "Error: --crops option is required"
  exit 1
end

main(input: ARGV[0], crop_list: options[:crop_list])
